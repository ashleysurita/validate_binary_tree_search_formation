class TreeNode {
    constructor(value = 0, leftChild = null, rightChild = null) {
        this.value = value
        this.left = leftChild
        this.right = rightChild
    }
}

function validateBST(tree) {
    // if tree is null, then return true
    if(!tree || (!tree.left && !tree.right)) return true
    
    let left = false
    let right = false
    
    // check if left is null, if it is, set left to true
    if(!tree.left) left = true
    // if left is not null, then check that the left value is less then the root value
    // if it is, and there's another leave, recursive function
    // if no more leaves, set left to true
    else if (tree.left && tree.left.value < tree.value) left = tree.left && (tree.left.left || tree.left.right) ? validateBST(tree.left) : true
        
    // check if right is null, if it is, set right to true
    if(!tree.right) right = true
    // if right is not null, then check that the right value is less then the root value
    // if it is, and there's another leave, recursive function
    // if no more leaves, set right to true
    else if (tree.right && tree.right.value > tree.value) right = tree.right && (tree.right.left || tree.right.right) ? validateBST(tree.right) : true
        
    
    // if both left and right are false, return false, otherwise return the combo of left + right
    return !left && !right ? false : left && right
}

// Test Cases
var tree1 = new TreeNode(2, new TreeNode(1), new TreeNode(3))
//        2
//     1    3

var tree2 = new TreeNode(1, new TreeNode(2), new TreeNode(3))
//        1
//     2    3

var tree3 = new TreeNode(
    8, new TreeNode(3, new TreeNode(1), new TreeNode(6)),
    new TreeNode(10, null, new TreeNode(14, new TreeNode(13))))
//           8
//      3         10   
//   1    6     _    14

console.log(validateBST(null)) // true
console.log(validateBST(tree1)) // true
console.log(validateBST(tree2)) // false
console.log(validateBST(tree3)) // true
console.log(validateBST(new TreeNode())) // true
